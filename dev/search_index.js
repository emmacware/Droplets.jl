var documenterSearchIndex = {"docs":
[{"location":"#Droplets","page":"Home","title":"Droplets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Superdroplet Method Logic for Cloud Microphysics","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Droplets]\nOrder = [:function]","category":"page"},{"location":"#Droplets.FK-Tuple{Any}","page":"Home","title":"Droplets.FK","text":"FK(T)\nFD(T)\nFunctions in the Denominator of the Köhler Equation\n\nUses the constants structs defined in Droplets\n\nArguments\n\nT: Temperature in K\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.adaptive_pαdt!-Union{Tuple{FT}, Tuple{Vector{Tuple{Int64, Int64}}, droplet_attributes, coagulation_run, Ref{FT}, Function, coag_settings{FT}}} where FT<:AbstractFloat","page":"Home","title":"Droplets.adaptive_pαdt!","text":"adaptive_pαdt!(L::Vector{Tuple{Int,Int}}, droplets::droplet_attributes, coag_data::coagulation_run, t_left::Ref{FT}, kernel::Function, settings::coag_settings{FT}) where FT<:AbstractFloat\n\nMap the probability function over the list of droplet pairs, L, using adaptive timestepping logic and update the coagulation data in place.\n\nArguments\n\nL::Vector{Tuple{Int,Int}}: List of droplet indices.\ndroplets::droplet_attributes: Droplet attributes.\ncoag_data::coagulation_run: Coagulation data.\nt_left::Ref{FT}: Timestep after adaptive substep.\nkernel::Function: Coalescence kernel function.\nsettings::coag_settings{FT}: Coagulation settings.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.calc_ρw-Tuple{Any, Any, Any}","page":"Home","title":"Droplets.calc_ρw","text":"calc_ρw(ξ, X, ΔV)\n\nCalculate the density of liquid water (ρw) based on the given droplet multiplicity(ξ) and volume(X), and domain volume.\n\nReturns\n\nρw: density of water\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.calc_ρw-Tuple{Any, Any}","page":"Home","title":"Droplets.calc_ρw","text":"calc_ρw(droplets, ΔV)\n\nCalculate the density of water (ρw) based on the given droplet attributes and domain volume.\n\nArguments\n\ndroplets: an array of droplets with attributes ξ (multiplicity) and X (volume).\nΔV: grid cell volume.\n\nReturns\n\nρw: density of water\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.coalescence_timestep!-Union{Tuple{FT}, Tuple{Union{Parallel, Serial}, none, droplet_attributes, coagulation_run, coag_settings{FT}}} where FT<:AbstractFloat","page":"Home","title":"Droplets.coalescence_timestep!","text":"coalescence_timestep!(run::backend, scheme::scheme_type, droplets::droplet_attributes)\n\nPerform a coalescence timestep for the given droplets using the Superdroplet Method (SDM)  Shima et al. (2009) when the lowest multiplicity of superdroplets is less than 1, the  largest superdroplet is split into two equal parts, as proposed by Dziekan and Pawlowska (ACP, 2017) https://doi.org/10.5194/acp-17-13509-2017\n\nArguments\n\nrun::backend: Threading over Linear Sampling option\nscheme::schemetype: adaptive or none\ndroplets::droplet_attributes: The superdroplets.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.compute_pαdt!-Union{Tuple{FT}, Tuple{Vector{Tuple{Int64, Int64}}, droplet_attributes, coagulation_run, Function, FT, coag_settings{FT}}} where FT<:AbstractFloat","page":"Home","title":"Droplets.compute_pαdt!","text":"compute_pαdt!(L::Vector{Tuple{Int,Int}}, droplets::droplet_attributes, coag_data::coagulation_run, kernel::Function, scale::FT,scalecoagsettings::coag_settings{FT}) where FT<:AbstractFloat\n\nMap the probability function over the list of droplet pairs, L, and update the coagulation data in place.\n\nArguments\n\nL::Vector{Tuple{Int,Int}}: List of droplet indices to be considered for coalescence.\ndroplets::droplet_attributes: Droplet attributes.\ncoag_data::coagulation_run: Coagulation data.\nkernel::Function: Coalescence kernel function.\nscale::FT: Scaling factor for the linear coalescence probability.\ncoagsettings::coag_settings{FT}: Coagulation settings.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.dXkohler_function_of_radius-NTuple{6, Any}","page":"Home","title":"Droplets.dXkohler_function_of_radius","text":"dXkohler_function_of_radius(R, M, m, T, Senv, timestep)\n\nCalculate the change in droplet volume due to condensation using the Kohler equation.\n\nArguments\n\nR: Droplet radius\nM: Molecular weight of the droplet substance\nm: Molecular weight of the dry air\nT: Temperature\nSenv: Saturation of the environment\ntimestep: Time step\n\nReturns\n\ndX: Change in droplet mass\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.dXkohler_function_of_radius-NTuple{7, Any}","page":"Home","title":"Droplets.dXkohler_function_of_radius","text":"dXkohler_function_of_radius(R, M, m, T, qv, P, timestep)\n\nCalculate the change in droplet volume due to condensation using the Kohler equation.\n\nArguments\n\nR: Droplet radius\nM: Molecular weight of the droplet substance\nm: Molecular weight of the dry air\nT: Temperature\nqv: Water vapor mixing ratio\nP: Pressure\ntimestep: Time step\n\nReturns\n\ndX: Change in droplet volume\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.dXkohler_function_of_radius_activated-NTuple{4, Any}","page":"Home","title":"Droplets.dXkohler_function_of_radius_activated","text":"dXkohler_function_of_radius_activated(R, T, Senv, timestep)\n\nCalculate the change in droplet volume due to condensation using the Kohler equation for activated droplets,     neglecting solute.\n\nArguments\n\nR: Droplet radius\nT: Temperature\nSenv: Saturation of the environment\ntimestep: Time step\n\nReturns\n\ndX: Change in droplet mass\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.dq_liq_cond-NTuple{7, Any}","page":"Home","title":"Droplets.dq_liq_cond","text":"dq_liq_cond(R, M, m, T, Senv, timestep, ρ_air)\n\nCalculate the change in q, liquid mixing ratio due to condensation of droplets, using droplet solute information.\n\nArguments\n\nR: Droplet radius, meters\nM: Molecular weight of the droplet\nm: Molecular weight of the solute\nT: Temperature\nSenv: Environmental saturation\ntimestep: Time step\nρ_air: Density of air\n\nReturns\n\ndql: Change in liquid water mass\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.dq_liq_cond_activated-NTuple{5, Any}","page":"Home","title":"Droplets.dq_liq_cond_activated","text":"dq_liq_cond_activated(R, T, Senv, timestep, ρ_air)\ndq_liq_cond_activated(R, M, m, T, Senv, timestep, ρ_air)\n\nCalculate the change in liquid water mass due to condensation of activated droplets.\n\nArguments\n\nR: Droplet radius, meters\nT: Temperature\nSenv: Environmental saturation\ntimestep: Time step\nρ_air: Density of air\n\nReturns\n\ndql: Change in liquid water mass\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.drkohler-NTuple{7, Any}","page":"Home","title":"Droplets.drkohler","text":"Methods:     -drkohler(R, M, m, T, qv, P, timestep)     -drkohler(R, M, m, T, Senv, timestep)\n\nRHS of the Köhler equation.\n\nArguments\n\nR: Droplet radius (m)\nM: Molecular weight of the solute (kg/mol)\nm: Molar mass of the solute (g/mol)\nT: Temperature (K)\nqv: Water vapor mixing ratio (kg/kg)\nP: Atmospheric pressure (Pa)\nSenv: Environmental saturation (dimensionless)\ntimestep: Time step (s)\n\nReturns\n\ndr: Change in droplet radius over the timestep (m)\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.drkohler_activated-NTuple{4, Any}","page":"Home","title":"Droplets.drkohler_activated","text":"drkohler_activated(R, T, Senv, timestep)\n\nCompute the rate of change of droplet radius for activated droplets, neglecting     differences in solutes.\n\nArguments\n\nR: Radius of the droplets.\nT: Temperature.\nSenv: Environmental supersaturation.\ntimestep: simulation Time step.\n\nReturns\n\ndr: rate of change of droplet radius.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.golovin-Union{Tuple{FT}, Tuple{droplet_attributes, Tuple{Int64, Int64}, coag_settings{FT}}} where FT<:AbstractFloat","page":"Home","title":"Droplets.golovin","text":"golovin(droplets, (j, k), settings)\n\nGolovin (or additive) kernel function for droplet coalescence, used to calculate the probabilities of two droplets colliding.     K(x,x') = b(x+x'),where b is the Golovin kernel coefficient, and x is the volume of the droplet. Taken from Golovin (1963), this kernel has an analytic solution for the Smulochowski Coagulation Equation.\n\nArguments\n\ndroplets: droplet attributes\n(j, k): indices of the droplets\nsettings: coagulation settings\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.hydrodynamic-Union{Tuple{FT}, Tuple{droplet_attributes, Tuple{Int64, Int64}, coag_settings{FT}}} where FT<:AbstractFloat","page":"Home","title":"Droplets.hydrodynamic","text":"hydrodynamic(droplets::droplet_attributes, (j,k)::Tuple{Int,Int}, settings::coag_settings{FT})::FT where FT<:AbstractFloat\n\nHydronynamic kernel function for droplet coalescence, used to calculate the probabilities of two      droplets colliding.     K(r,r') = π * (r+r')^2 * |v(r)-v(r')| * E(r,r')     where E(r,r') is the collision efficiency function, (currently not implemented), and v is the terminal velocity of      a droplet of radius size r.\n\nArguments\n\ndroplets::droplet_attributes: The attributes of the droplets.\n(j,k)::Tuple{Int,Int}: The indices of the droplets.\nsettings::coag_settings{FT}: The coagulation settings.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.init_ξ_const-Union{Tuple{coag_settings{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"Home","title":"Droplets.init_ξ_const","text":"init_ξ_const(settings::coag_settings{FT}) where FT<:AbstractFloat\n\ninitξconst initializes droplets based on the constant-multiplicity initialization method, using an exponential distribution around the initial volume of the droplets. The method is as described in Shima et al. (2009) https://doi.org/10.5194/acp-9-4491-2009\n\nArguments\n\nsettings: Coagulation settings, type ::coag_settings.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.pair_Ps_adaptive!-Union{Tuple{FT}, Tuple{Int64, Tuple{Int64, Int64}, droplet_attributes, coagulation_run, Vector{FT}, Ref{FT}, Function, coag_settings{FT}}} where FT<:AbstractFloat","page":"Home","title":"Droplets.pair_Ps_adaptive!","text":"pair_Ps_adaptive!(α::Int, pair::Tuple{Int,Int}, droplets::droplet_attributes, coag_data::coagulation_run, t_max::Vector{FT})\n\nThis function calculates the coalescence probability for a given pair of droplets, using adaptive timestepping logic (Bartman et al. 2021).  It takes the following arguments:\n\nα::Int: The index of the coalescence model.\npair::Tuple{Int,Int}: The indices of the droplets in the pair.\ndroplets::droplet_attributes: The attributes of the droplets.\ncoag_data::coagulation_run: The coagulation run data.\nt_max::Vector{FT}: The maximum timestep allowed given multiple sampling.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.radius_to_volume-Tuple{AbstractFloat}","page":"Home","title":"Droplets.radius_to_volume","text":"radius_to_volume(R::AbstractFloat)\n\nVolume of sphere with radius R\n\nArguments\n\nR::AbstractFloat: Radius in meters.\n\nReturns\n\nThe volume of the droplet in meters^3.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.terminal_v-Tuple{FT} where FT<:AbstractFloat","page":"Home","title":"Droplets.terminal_v","text":"terminal_v(r::FT) where FT<:AbstractFloat\n\nCompute the terminal velocity of a droplet of radius r, using tables from Gunn and Kinzer, (1949), https://doi.org/10.1175/1520-0469(1949)006<0243:TTVOFF>2.0.CO;2\n\nArguments\n\nr::FT: The radius of the droplet in meters.\n\nReturns\n\nThe terminal velocity of the droplet in meters/second.\n\n\n\n\n\n","category":"method"},{"location":"#Droplets.volume_to_radius-Tuple{AbstractFloat}","page":"Home","title":"Droplets.volume_to_radius","text":"volume_to_radius(V::AbstractFloat)\n\nradius based on spherical volume\n\nArguments\n\nV::AbstractFloat: Spherical volume in meters^3.\n\nReturns\n\nThe radius of the droplet in meters.\n\n\n\n\n\n","category":"method"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Droplets]\nOrder = [:type]","category":"page"},{"location":"#Droplets.Constants","page":"Home","title":"Droplets.Constants","text":"Constants{FT<:AbstractFloat}\n\nA struct representing constants used in the Droplets package.\n\nFields\n\nFT: The type of the constants, which must be a subtype of AbstractFloat.\nk: thermal conductivity (default: 0.024).\nμ: dynamic viscosity (default: 1.6e-5).\nDv: diffusion coefficient of water vapor in air (default: 2.26e-5).\nρl: density of liquid water (default: 1000.0).\nRd: gas constant for dry air (default: 287.0).\nRv: gas constant for water vapor (default: 461.0).\ngconst: gravitational constant (default: 9.8).\nL: latent heat of vaporization (default: 22.6e5).\nCp: specific heat of dry air at constant pressure (default: 4181).\n\n\n\n\n\n","category":"type"},{"location":"#Droplets.coag_settings","page":"Home","title":"Droplets.coag_settings","text":"coag_settings{FT<:AbstractFloat}\n\nA struct representing the settings for coalescence.\n\nFields\n\nFT: AbstractFloat.\nΔt: The time step for the coalescence simulation.\nΔV: The volume of the coalescence domain.\nNs: The number of superdroplets.\nscale: The scaling factor that allows for linear sampling.\nR_min: The minimum radius of sampled droplets, used in some initializations. Radius in meters\nR_max: The maximum radius of sampled droplets, used in some initializations. Radius in meters.\ngolovin_kernel_coeff: The Golovin kernel coefficient, 1/seconds.\nhydrodynamic_collision_eff_func: A boolean indicating whether to use the       hydrodynamic collision efficiency function. Currently not implemented.\nkernel: The kernel function used for coalescence. Implemented options are golovin or hydrodynamic,   can take any user implemented function with input type (::dropletattributes, pairindex::Tuple{Int,Int}, ::coagsettings{FT}).\nn0: The initial real world droplet concentration.\nR0: The initial seed radius of the droplets.\n\n\n\n\n\n","category":"type"},{"location":"#Droplets.coagulation_run","page":"Home","title":"Droplets.coagulation_run","text":"struct coagulation_run{FT<:AbstractFloat}\n\nStruct initialising temp memory used for coagulation.\n\nInput:\n\nNs::Int : Number of superdroplets.\n\nFields:\n\nI::Vector{Int} : Vector of indexes to be shuffled for permutations.\npαdt::Vector{FT} : Vector of coalescence probabilities for each pair.\nϕ::Vector{FT} : Random numbers to be used in Monte Carlo coalescence.\nlowest_zero::Ref{Bool} : Reference to a boolean indicating if the lowest multiplicity is zero.\ndeficit::Ref{FT} : Reference to a float representing the deficit in mass or volume.\n\n\n\n\n\n","category":"type"},{"location":"#Droplets.droplet_attributes","page":"Home","title":"Droplets.droplet_attributes","text":"struct droplet_attributes{FT<:AbstractFloat}\n\nA struct representing the attributes of a droplet.\n\nFields:\n\nFT: AbstractFloat.\nξ: Vector of integers representing the multiplicity of each droplet.\nR: Vector of floats representing the radius of each droplet.\nX: Vector of floats representing the volume of each droplet.\n\n\n\n\n\n","category":"type"},{"location":"#Droplets.run_settings","page":"Home","title":"Droplets.run_settings","text":"struct run_settings{FT<:AbstractFloat}\n\nA struct representing the run settings for the binning process.\n\nFields:\n\nFT: The type of floating-point numbers used in the run settings.\nnum_bins: The number of bins to use for binning output(default: 128).\nradius_bins_edges: The edges of the bins for the radius (default: logarithmic scale from 10e-6 to 5e3e-6).\nsmooth: A boolean indicating whether to apply smoothing to the bins (default: true).\nsmooth_scope: The scope of smoothing (default: 2).\ninit_random_seed: The random seed for initialization (default: 30).\ncoag_threading: The threading method for coalescence (default: Serial).\nSerial() or Parallel()\nscheme: The scheme to use for coalescence (default: none).   -none(), Adaptive()\noutput_steps: The time steps at which to output the results (default: [0, 1200, 2400, 3600]).\ninit_method: The method to use for initialization (default: init_logarithmic).\ninitlogarithmic,initξconst, inituniform_sd\nbinning_method: The method to use for binning (default: massdensitylnr).    (a function that takes droplets and coagsettings as arguments)\nnormalize_bins_dlnr: A boolean indicating whether to normalize the bins by the logarithm of the radius (default: true).\n\n\n\n\n\n","category":"type"}]
}
